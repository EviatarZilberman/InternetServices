Other subjects:

using keyword:
1. Used to call directuve links- shorting the writing when calling a class etc.
2. Used to use classes that implements the IDisposable interface. That interface is used to close connections to unmanaged resources, like db, files etc.
When using the 'using' keyword it calls the Dispose() method automatically when in the end of the process.
When the using is used like this: using () {} the Dispose() method is called in the end of the {}.

virtual keyword:
Allows to override the base function  or property in a derived class, by using the keyword override in the name of the overriding method.

as and is operators:
is- Used to perform checikng for reference types (i is int).
as- Used to perform conversion between competible re-=ference types (var a = "aaa" string b = a as string).

Boxing / Unboxing:
Mechanisms used to convert between value types and reference types (must be used carefully because it can occur runtime exceptions):

Boxing (stored in the heap):
int num = 123;           // Value type (int)
object obj = num;        // Boxing: int is converted to object

Unboxing (stored in the stack):
object obj = 123;        // Boxing
int num = (int)obj;      // Unboxing: object is converted back to int

Boxing and unboxing can cause performance overhead because:

Boxing allocates memory on the heap, which is slower compared to the stack.
Unboxing involves casting and may result in runtime exceptions if not done carefully.

Collections:
1. ArrayList- stores objects as object type. May be slower and less safer.
2. Hashtable- A collection of key/value pairs, where keys are unique.
3. Dictionary<TKey, TValue>- A collection of key/value pairs where both the key and value are of specific types.
4. HashSet<T>- A collection of unique elements.
5. LinkedList<T>- A doubly linked list for efficient insertion and removal of elements.

Parameter types:
1. arguments are passed to methods by default as value. It means that a copy of the variable is passed and the origin variable is unchanged outside the method.
2. If we want a method to modify the argument outside the method, we can pass the argument with the keyword ref. The passed argument must be initialized before passed to the method.
3. Methods can return multiple arguments by using the keyword out. The argument must contain some value. The argument doesn't need to be initialized before passed to the method.
4. in keyword- The parameter can't be changed in the method (readonly).
5. params keyword- The last argument in the parameter line of a method. Work like an array and let the users send parameters as much as they want (these parameters will be treated as an array):
public static function(params int[] numbers) => public static function(1,2,3,4,5.....). 






